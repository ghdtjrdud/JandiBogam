<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.mvc.model.dao.MealDao">
    <resultMap id="MealWithFoodsResultMap" type="MealDto">
        <id property="id" column="id" />
        <result property="userId" column="user_id"/>
        <result property="eatDate" column="eat_date"/>
        <result property="timeSlot" column="time_slot"/>
        <result property="photoUrl" column="photo_url"/>
        <result property="memo" column="memo"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <collection property="mealFoods" ofType="MealFoodDto" columnPrefix="mf_">
            <result property="mealId" column="meal_id"/>
            <result property="foodId" column="food_id"/>
            <!-- 수정: foodNutrientDto의 모든 필드 매핑 -->
            <association property="foodNutrientDto" javaType="FoodNutrientDto">
                <id property="id" column="fn_id"/>
                <result property="foodName" column="fn_food_name"/>
                <result property="energy" column="fn_energy"/>
                <result property="protein" column="fn_protein"/>
                <result property="fat" column="fn_fat"/>
                <result property="carbohydrate" column="fn_carbohydrate"/>
                <result property="sugar" column="fn_sugar"/>
                <result property="fiber" column="fn_fiber"/>
                <result property="potassium" column="fn_potassium"/>
                <result property="sodium" column="fn_sodium"/>
                <result property="cholesterol" column="fn_cholesterol"/>
                <result property="saturatedFat" column="fn_saturated_fat"/>
            </association>
        </collection>
    </resultMap>

<!--  식단 등록  -->
    <insert id="insertMeal" parameterType="MealDto" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO meals (user_id, eat_date, time_slot, photo_url, memo)
        VALUES (#{userId}, #{eatDate}, #{timeSlot}, #{photoUrl}, #{memo})
    </insert>

<!--  식단 등록과 동시에 meal_foods 에도 등록이 일어나야함  -->
    <insert id="insertMealFoods" parameterType="MealDto">
        INSERT INTO meal_foods (meal_id, food_id)
        VALUES
        <foreach collection="foodIds" item="foodId" separator=",">
        (#{mealId}, #{foodId})
        </foreach>
    </insert>

    <select id="selectById" resultType="MealDto" parameterType="int">
        SELECT *
        FROM meals
        WHERE id=#{id}
    </select>

    <!-- 식단 상세조회 시 음식의 종류는 meal_foods 에서 갖고와야함 -->
    <select id="selectMealFoodById" parameterType="int" resultType="int">
        SELECT food_id
        FROM meal_foods
        WHERE meal_id = #{mealId}
    </select>

    <select id="selectMealsByFilter" resultType="MealDto">
        SELECT *
        FROM meals
        WHERE user_id = #{userId}
        <if test="startDate != null and endDate != null">
            AND eat_date BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test="timeSlot != null and timeSlot != '' and timeSlot != '전체'">
            AND time_slot = #{timeSlot}
        </if>
        ORDER BY eat_date DESC,
        FIELD(time_slot, '아침', '점심', '저녁')
    </select>

    <update id="updateMeal" parameterType="MealDto">
        UPDATE meals
        SET eat_date = #{eatDate},
        time_slot = #{timeSlot},
        photo_url = #{photoUrl},
        memo = #{memo}
        WHERE id = #{id} AND user_id = #{userId}
    </update>

    <delete id="deleteMeal" parameterType="int">
        DELETE FROM meals
        WHERE id = #{id} AND user_id = #{userId}
    </delete>

    <delete id="deleteMealFoods" parameterType="int">
        DELETE FROM meal_foods
        WHERE meal_id = #{id}
    </delete>
    
    <select id="selectByUserIdBetweenDates" resultMap="MealWithFoodsResultMap">
        SELECT m.*,
        mf.meal_id as mf_meal_id,
        mf.food_id as mf_food_id,
        fn.id as mf_fn_id,
        fn.food_name as mf_fn_food_name,
        fn.energy as mf_fn_energy,
        fn.protein as mf_fn_protein,
        fn.fat as mf_fn_fat,
        fn.carbohydrate as mf_fn_carbohydrate,
        fn.sugar as mf_fn_sugar,
        fn.fiber as mf_fn_fiber,
        fn.potassium as mf_fn_potassium,
        fn.sodium as mf_fn_sodium,
        fn.cholesterol as mf_fn_cholesterol,
        fn.saturated_fat as mf_fn_saturated_fat
        FROM meals m
        LEFT JOIN meal_foods mf ON m.id = mf.meal_id
        LEFT JOIN food_nutrients fn ON mf.food_id = fn.id
        WHERE m.user_id = #{userId} AND m.eat_date BETWEEN #{startDate} AND #{endDate}
        ORDER BY m.eat_date, m.time_slot
    </select>

    <select id="countByUserIdBetweenDates" resultType="int">
        SELECT COUNT(*)
        FROM meals
        WHERE user_id = #{userId}
        AND eat_date BETWEEN #{startDate} AND #{endDate}
    </select>

    <!-- 특정 날짜의 사용자 식사 목록 조회 -->
    <select id="selectByUserIdAndEatDate" resultMap="MealWithFoodsResultMap">
        SELECT m.*,
        mf.meal_id as mf_meal_id,
        mf.food_id as mf_food_id,
        fn.id as mf_fn_id,
        fn.food_name as mf_fn_food_name,
        fn.energy as mf_fn_energy,
        fn.protein as mf_fn_protein,
        fn.fat as mf_fn_fat,
        fn.carbohydrate as mf_fn_carbohydrate,
        fn.sugar as mf_fn_sugar,
        fn.fiber as mf_fn_fiber,
        fn.potassium as mf_fn_potassium,
        fn.sodium as mf_fn_sodium,
        fn.cholesterol as mf_fn_cholesterol,
        fn.saturated_fat as mf_fn_saturated_fat
        FROM meals m
        LEFT JOIN meal_foods mf ON m.id = mf.meal_id
        LEFT JOIN food_nutrients fn ON mf.food_id = fn.id
        WHERE m.user_id = #{userId} AND m.eat_date = #{eatDate}
        ORDER BY m.time_slot
    </select>

</mapper>